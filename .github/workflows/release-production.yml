name: Release Production

on:
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write
  actions: read
  id-token: write
  packages: read

jobs:
  disable-protection:
    name: Deactivate Branch Protection
    uses: ./.github/workflows/_disable_protection.yml
    with:
      branch: release-prod
    secrets:
      TOKEN: ${{ secrets.TOKEN }}

  prepare-release:
    runs-on: ubuntu-latest
    needs: disable-protection
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: prod # checkout the production branch

      - name: Set up Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"

      - name: Delete release-prod branch if it exists
        run: |
          git fetch origin --prune
          if git show-ref --verify --quiet refs/remotes/origin/release-prod; then
            git push origin --delete release-prod
          fi

      - name: Create release-prod branch from prod
        run: |
          git checkout -b release-prod
          git push origin release-prod

  build:
    name: Build Production
    needs: prepare-release
    uses: ./.github/workflows/_build.yml
    with:
      environment: deploy_dev_front  # Utilise le mÃªme environment que dev

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: Get runner's public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Removing all whitelisted IP
        run: |
          curl -sm 45 -k 'https://${{secrets.CPANEL_LOGIN}}:${{secrets.CPANEL_PASSWORD}}@${{ secrets.CPANEL_SERVER }}:2083/execute/SshWhitelist/remove_all'

      - name: Whitelisting the runner IP
        run: |
          curl -sm 45 -k 'https://${{secrets.CPANEL_LOGIN}}:${{secrets.CPANEL_PASSWORD}}@${{ secrets.CPANEL_SERVER }}:2083/execute/SshWhitelist/add?address=${{ steps.ip.outputs.ipv4 }}&port=22'

      - name: Making sure the IP is whitelisted
        run: |
          curl -sm 45 -k 'https://${{secrets.CPANEL_LOGIN}}:${{secrets.CPANEL_PASSWORD}}@${{ secrets.CPANEL_SERVER }}:2083/execute/SshWhitelist/list' | grep ${{ steps.ip.outputs.ipv4 }}

      - name: Installing the SSH Key
        run: |
          eval $(ssh-agent -s)
          mkdir -p ~/.ssh       
          chmod 700 ~/.ssh 
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 0400 ~/.ssh/id_rsa

      # Run rsync twice to handle Imunify360 firewall issues (same as dev)
      - name: Sending data with RSYNC (First attempt)
        run: |
          sleep 2
          rsync --timeout=60 -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" \
          --exclude=".git" -av --delete build/ \
          ${{ secrets.CPANEL_LOGIN }}@${{ secrets.CPANEL_SERVER }}:/home/${{ secrets.CPANEL_LOGIN }}/app/front || true

      - name: Sending data with RSYNC (Second attempt)
        run: |
          sleep 2
          rsync --timeout=60 -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" \
          --exclude=".git" -av --delete build/ \
          ${{ secrets.CPANEL_LOGIN }}@${{ secrets.CPANEL_SERVER }}:/home/${{ secrets.CPANEL_LOGIN }}/app/front

      - name: Restarting NodeJS application via ssh
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa \
          ${{ secrets.CPANEL_LOGIN }}@${{ secrets.CPANEL_SERVER }} \
          '/usr/sbin/cloudlinux-selector stop --json --interpreter nodejs --user ${{ secrets.CPANEL_LOGIN }} --app-root app/front && \
          /usr/sbin/cloudlinux-selector start --json --interpreter nodejs --user ${{ secrets.CPANEL_LOGIN }} --app-root app/front && \
          /usr/sbin/cloudlinux-selector install-modules --json --interpreter nodejs --user ${{ secrets.CPANEL_LOGIN }} --app-root app/front'

      - name: Cleaning SSH keys
        if: always()
        run: rm -fr ~/.ssh

      - name: Cleaning artifacts
        uses: geekyeggo/delete-artifact@v5
        if: always()
        with:
          name: build
          failOnError: false

  activate-protection:
    name: Activate Branch Protection
    needs: deploy
    uses: ./.github/workflows/_enable_protection.yml
    with:
      branch: release-prod
      lock: true
    secrets:
      TOKEN: ${{ secrets.TOKEN }}
